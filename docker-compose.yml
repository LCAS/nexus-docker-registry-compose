services:
  nexus:
    image: sonatype/nexus3:3.69.0
    restart: unless-stopped
    ports:
      - 8083:8081
      - 8089:8888
    environment:
      - "NEXUS_CONTEXT=repository"
    volumes:
      - ./data/nexus-data:/nexus-data
  nexus_aoc:
    image: sonatype/nexus3:3.72.0
    restart: unless-stopped
    ports:
      - 9083:8081
      - 9089:8888
    volumes:
      - ./data/nexus-data-aoc:/nexus-data

  zrok_init:
    image: openziti/zrok:1.0.8
    volumes:
      - zrok-data:/zrok/.zrok
    restart: "no"
    tty: true
    environment:
      HOME: /zrok
      PFXLOG_NO_JSON: "true"
    entrypoint: []
    secrets:
      - zrok_token
    user: root
    command: >
      bash -c "
      RANDOM_STRING=$$(head /dev/urandom | tr -dc a-z0-9 | head -c 13 ; echo '');
      if zrok reserve public -n $$RANDOM_STRING http://example.com; then
        zrok release $$RANDOM_STRING || true;
        echo 'Zrok environment already initialized and working.';
        exit 0;
      fi;
      zrok config set apiEndpoint ${ZROK_API_ENDPOINT} &&      
      (zrok -p disable || true) &&
      zrok enable -d '${ZROK_ENV_NAME}' $(cat /run/secrets/zrok_token)
      "

  zrok_jabas_init:
    extends: zrok_init
    volumes:
      - zrok-jabas-data:/zrok/.zrok
    secrets:
      - zrok_jabas_token
    command: >
      bash -c "
      RANDOM_STRING=$$(head /dev/urandom | tr -dc a-z0-9 | head -c 13 ; echo '');
      if zrok reserve public -n $$RANDOM_STRING http://example.com; then
        zrok release $$RANDOM_STRING || true;
        echo 'Zrok environment already initialized and working.';
        exit 0;
      fi;
      zrok config set apiEndpoint ${ZROK_JABAS_API_ENDPOINT} &&
      (zrok -p disable || true) &&
      zrok enable -d '${ZROK_ENV_NAME}' $(cat /run/secrets/zrok_jabas_token)
      "


  zrok_repo:
  # currently requires the old version as the server hasn't been updated yet
    image: openziti/zrok:1.0.8
    volumes:
      - zrok-data:/zrok/.zrok
    restart: unless-stopped
    environment:
      HOME: /zrok
      PFXLOG_NO_JSON: "true"
      ZROK_NAME: aocrepo
      BACKEND_URL: http://nexus_aoc:8081
      OPTIONS: 
    entrypoint: []
    tty: true
    user: root
    depends_on:
      zrok_init:
        condition: service_completed_successfully
    links:
      - nexus_aoc

    command: >
      bash -c "

      trap 'echo Stopping zrok service...; zrok release $${ZROK_NAME} || true; echo Zrok service stopped.' EXIT;

      (zrok release $${ZROK_NAME} || true) &&
      zrok reserve public -n $${ZROK_NAME} $${OPTIONS} $${BACKEND_URL} &&
      zrok share reserved $${ZROK_NAME} --headless
      "

  zrok_registry:
    extends: zrok_repo
    environment:
      ZROK_NAME: aoccr
      BACKEND_URL: http://nexus_aoc:8888

  zrok_jabas_repo:
  # currently requires the old version as the server hasn't been updated yet
    image: openziti/zrok:1.0.8
    volumes:
      - zrok-jabas-data:/zrok/.zrok
    restart: unless-stopped
    environment:
      HOME: /zrok
      PFXLOG_NO_JSON: "true"
      ZROK_NAME: nexus
      BACKEND_URL: http://nexus_aoc:8081
      OPTIONS: 
    entrypoint: []
    tty: true
    user: root
    depends_on:
      zrok_jabas_init:
        condition: service_completed_successfully
    links:
      - nexus_aoc

    command: >
      bash -c "

      trap 'echo Stopping zrok service...; zrok release $${ZROK_NAME} || true; echo Zrok service stopped.' EXIT;

      (zrok release $${ZROK_NAME} || true) &&
      zrok reserve public -n $${ZROK_NAME} $${OPTIONS} $${BACKEND_URL} &&
      zrok share reserved $${ZROK_NAME} --headless
      "



    # image: openziti/zrok
    # restart: unless-stopped
    # user: "1001"
    # volumes:
    #   - ./zrok-jabas/.zrok:/.zrok:ro
    # environment:
    #     HOME: "/"
    #     PFXLOG_NO_JSON: "true"
    # command: share reserved "nexus" --headless --override-endpoint http://nexus_aoc:8081
    # links:
    #   - nexus_aoc
  zrok_jabas_registry:
    extends: zrok_jabas_repo
    environment:
      ZROK_NAME: registry
      BACKEND_URL: http://nexus_aoc:8888
    # image: openziti/zrok
    # restart: unless-stopped
    # user: "1001"
    # volumes:
    #   - ./zrok-jabas/.zrok:/.zrok:ro
    # environment:
    #     HOME: "/"
    #     PFXLOG_NO_JSON: "true"
    # command: share reserved "registry" --headless --override-endpoint http://nexus_aoc:8888
    # links:
    #   - nexus_aoc

  registry_frontend_lcas:
    image: klausmeyer/docker-registry-browser:latest
    restart: unless-stopped
    environment:
      - 'DOCKER_REGISTRY_URL=http://nexus:8888'
      - PUBLIC_REGISTRY_URL=lcas.lincoln.ac.uk
      - 'SECRET_KEY_BASE=/AtOvCMBJedRBX+g'
      - ENABLE_COLLAPSE_NAMESPACES=false
      - ENABLE_DELETE_IMAGES=false
      - SCRIPT_NAME=/docker-images
      - RAILS_RELATIVE_URL_ROOT=/docker-images

    ports:
      - '9080:8080'
    links:
      - nexus

  registry_frontend_lcas_private:
    image: klausmeyer/docker-registry-browser:latest
    restart: unless-stopped

    # .env file example:
    # BASIC_AUTH_USER=<NAME>
    # BASIC_AUTH_PASSWORD=<TOKEN>
    env_file:
      - .env
    environment:
      - 'DOCKER_REGISTRY_URL=http://nexus:8888'
      - PUBLIC_REGISTRY_URL=lcas.lincoln.ac.uk
      - 'SECRET_KEY_BASE=/AtOvCMBJedRBX+g'
      - ENABLE_COLLAPSE_NAMESPACES=false
      - ENABLE_DELETE_IMAGES=true

    links:
      - nexus

  registry_frontend_lcas_private_zrok:
    extends: zrok_repo
    environment:
      ZROK_NAME: lcasregistry
      BACKEND_URL: http://registry_frontend_lcas_private:8080
      OPTIONS: "--basic-auth ${BASIC_AUTH_USER}:${BASIC_AUTH_PASSWORD}"
    links:
      - registry_frontend_lcas_private
  # image: openziti/zrok
  # restart: unless-stopped
  # user: "1001"
  # volumes:
  #   - ${HOME}/.zrok:/.zrok
  # environment:
  #     HOME: "/"
  #     PFXLOG_NO_JSON: "true"
  # command: share reserved "lcasregistry" --headless --override-endpoint http://registry_frontend_lcas_private:8080
  # links:
  #   - registry_frontend_lcas_private

secrets:
  zrok_token:
    environment: ZROK_TOKEN
  zrok_jabas_token:
    environment: ZROK_JABAS_TOKEN

volumes:
  zrok-data:
  zrok-jabas-data: